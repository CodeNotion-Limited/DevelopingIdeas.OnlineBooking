@page "/scheduler"
@inject DialogService DialogService
@inject IAppointmentClient AppointmentClient
@inject IAccessClient AccessClient
@inject NotificationService NotificationService

<div class="container" id="DataList">
    <div class="row py-5">
        <div class="col">
            <RadzenCard>

                <RadzenDataList WrapItems="true" AllowPaging="true" Data="@_accessLogs" TItem="AccessLog" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Template Context="accessLog">
                        <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
                            <div class="container">
                                <div class="row">
                                    <div class="col-lg-3 p-3 product-title">
                                            @(accessLog.Name)
                                    </div>
                                    <div class="col-lg-7 p-3">
                                        <div class="row d-flex">
                                            <div class="col-md-6 col-lg-2">
                                                <h5 class="mb-0">Quando</h5>
                                                <p class="mb-sm-2 mb-lg-0">@(accessLog.Date)</p>
                                            </div>
                                            <div class="col-md-6 col-lg-5">
                                                <h5 class="mb-0">Id Smartlock</h5>
                                                <p class="mb-sm-2 mb-lg-0">@(accessLog.Id)</p>
                                            </div>
                                            @* <div class="col-md-6 order-first order-lg-last col-lg-3 text-sm-left text-lg-right mb-3 mb-lg-0"> *@
                                            @*     <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", product.UnitPrice)}") /> *@
                                            @* </div> *@
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>

            </RadzenCard>
        </div>
    </div>
</div>

<style>
.product-title {
    min-height: 72px;
    color: #fae9e3;
    background-color: #ff6d41;
    font-size: 20px;
    font-weight: bold;
    line-height: 20px;
    letter-spacing: -0.02em;
}
.price-badge {
    font-size: 16px;
    font-weight: bold;
    line-height: 20px;
    padding: 8px;
}
</style>

<RadzenButton Click="@OpenDoor" Text="Apri" Icon="vpn_key" ButtonStyle="ButtonStyle.Primary" Style="width: 120px; height: 40px; alignment: center"/>

<RadzenScheduler @ref=@scheduler SlotRender=@OnSlotRender style="height: 768px;" TItem="Appointment" Data=@_appointments StartProperty="Start" EndProperty="End"
                 TextProperty="Text" SelectedIndex="2"
                 SlotSelect=@OnSlotSelect AppointmentSelect=@OnAppointmentSelect AppointmentRender=@OnAppointmentRender>
    <RadzenDayView/>
    <RadzenWeekView/>
    <RadzenMonthView/>
</RadzenScheduler>

@code {
    
    RadzenScheduler<Appointment> scheduler;
    private ICollection<Appointment> _appointments = new List<Appointment>();
    private IEnumerable<AccessLog> _accessLogs = new List<AccessLog>();
    

    Timer? _updateTimer;
    
    protected override async Task OnInitializedAsync()
    {
        _updateTimer = new Timer(_ => { InvokeAsync(RefreshData); }, null, 0, 500);
    }
    
    async Task RefreshData()
    {
        _appointments = await AppointmentClient.GetAllAsync();
        _accessLogs = await AccessClient.GetAccessesAsync("Dennis (Keypad)");
        StateHasChanged();
    }

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
    // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }

    // Highlight working hours (9-18)
        if ((args.View.Text == "Week" || args.View.Text == "Day") && args.Start.Hour > 8 && args.Start.Hour < 19)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        Appointment data = await DialogService.OpenAsync<AddAppointmentPage>("Add Appointment", 
            new Dictionary<string, object> {{"Start", args.Start}, {"End", args.End}});

        if (data != null)
        {
            AddAppointment(data);
            Console.WriteLine(data.Text);
            Console.WriteLine(data.UserEmail);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<Appointment> args)
    {
        await DialogService.OpenAsync<EditAppointmentPage>("Edit Appointment", new Dictionary<string, object> {{"Appointment", args.Data}});

        await scheduler.Reload();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<Appointment> args)
    {
    // Never call StateHasChanged in AppointmentRender - would lead to infinite loop

        if (args.Data.Text == "Birthday")
        {
            args.Attributes["style"] = "background: red";
        }
    }

    private async Task AddAppointment(Appointment newAppointment)
    {
        await AppointmentClient.CreateAsync(newAppointment);
        _appointments = await AppointmentClient.GetAllAsync();
    }

    private async void OpenDoor()
    {
        bool doorOpen = await AccessClient.AccessAsync("dennisbattisti.26@gmail.com");
        if (doorOpen)
        {
            var successMessage = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Ok!",
                Detail = "Porta aperta con successo",
                Duration = 4000
            };
            NotificationService.Notify(successMessage);
        }
        else
        {
            var errorMessage = new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "Attenzione",
                Detail = "Non puoi aprire la porta",
                Duration = 4000
            };
            NotificationService.Notify(errorMessage);
        }
    }
}